// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract ProposalContract {
    // ** Data **

    // Owner
    address public owner;
    uint256 private counter;

    struct Proposal {
        string description; // Description of the proposal
        uint256 approve; // Number of approve votes
        uint256 reject; // Number of reject votes
        uint256 pass; // Number of pass votes
        uint256 total_vote_to_end; // When the total votes reach this limit, proposal ends
        bool current_state; // This shows if the proposal is passed or failed
        bool is_active; // This shows if voting is still open
    }

    mapping(uint256 => Proposal) public proposal_history; // Stores previous proposals
    mapping(address => bool) private hasVoted; // Tracks voters to prevent double voting

    // Constructor
    constructor() {
        owner = msg.sender;
    }

    // ** Modifiers **
    
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the contract owner can perform this action.");
        _;
    }

    modifier activeProposal() {
        require(proposal_history[counter].is_active, "No active proposal to vote on.");
        _;
    }

    modifier newVoter() {
        require(!hasVoted[msg.sender], "You have already voted on this proposal.");
        _;
    }

    // ** Execute Functions **

    function setOwner(address new_owner) external onlyOwner {
        owner = new_owner;
    }

    function createProposal(string calldata _description, uint256 _total_vote_to_end) external onlyOwner {
        counter += 1;
        proposal_history[counter] = Proposal({
            description: _description,
            approve: 0,
            reject: 0,
            pass: 0,
            total_vote_to_end: _total_vote_to_end,
            current_state: false,
            is_active: true
        });

        // Reset voter tracking
        resetVoterTracking();
    }

    function vote(uint8 choice) external activeProposal newVoter {
        Proposal storage proposal = proposal_history[counter];
        
        // Track voter
        hasVoted[msg.sender] = true;

        if (choice == 1) {
            proposal.approve += 1;
        } else if (choice == 2) {
            proposal.reject += 1;
        } else if (choice == 0) {
            proposal.pass += 1;
        }

        // Recalculate proposal state
        proposal.current_state = calculateCurrentState();

        // Check if voting should end
        if ((proposal.approve + proposal.reject + proposal.pass) >= proposal.total_vote_to_end) {
            proposal.is_active = false;
            resetVoterTracking(); // Reset for next proposal
        }
    }

    function calculateCurrentState() private view returns (bool) {
        Proposal storage proposal = proposal_history[counter];

        uint256 approve = proposal.approve;
        uint256 reject = proposal.reject;
        uint256 pass = proposal.pass;
        uint256 totalVotes = approve + reject + pass;

        if (totalVotes == 0) {
            return false; // No votes, proposal fails by default
        }

        // Adjust pass votes logic
        pass = (pass % 2 == 1) ? (pass + 1) / 2 : pass / 2;

        // Proposal passes if approve votes are at least 60% of total votes
        return (approve * 100) / totalVotes >= 60;
    }

    function resetVoterTracking() private {
        // Reset all voter tracking (reinitialize mapping)
        // This is gas-efficient compared to iterating over addresses
        for (uint256 i = 0; i < counter; i++) {
            hasVoted[address(i)] = false;
        }
    }
}
