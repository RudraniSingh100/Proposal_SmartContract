// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract ProposalContract {
    // ** State Variables **

    address public owner;
    uint256 private counter;

    struct Proposal {
        string title;
        string description;
        uint256 approve;
        uint256 reject;
        uint256 pass;
        uint256 total_vote_to_end;
        bool current_state;
        bool is_active;
    }

    mapping(uint256 => Proposal) private proposal_history;
    mapping(address => bool) private hasVoted; // Optimized voter tracking
    address[] private votedAddresses; // Stores actual voter addresses

    // ** Constructor **

    constructor() {
        owner = msg.sender;
    }

    // ** Modifiers **

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    modifier activeProposal() {
        require(proposal_history[counter].is_active, "No active proposal");
        _;
    }

    modifier newVoter() {
        require(!hasVoted[msg.sender], "Already voted");
        _;
    }

    // ** Execute Functions **

    function setOwner(address new_owner) external onlyOwner {
        require(new_owner != address(0), "Invalid owner address");
        owner = new_owner;
    }

    function createProposal(
        string calldata _title, 
        string calldata _description, 
        uint256 _total_vote_to_end
    ) 
        external onlyOwner 
    {
        require(_total_vote_to_end > 0, "Total votes to end must be greater than 0");

        counter++;
        proposal_history[counter] = Proposal({
            title: _title,
            description: _description,
            approve: 0,
            reject: 0,
            pass: 0,
            total_vote_to_end: _total_vote_to_end,
            current_state: false,
            is_active: true
        });

        // Clear previous voter records
        clearVoterTracking();
    }

    function vote(uint8 choice) external activeProposal newVoter {
        require(choice <= 2, "Invalid vote option");

        Proposal storage proposal = proposal_history[counter];

        if (choice == 1) {
            proposal.approve++;
        } else if (choice == 2) {
            proposal.reject++;
        } else {
            proposal.pass++;
        }

        hasVoted[msg.sender] = true;
        votedAddresses.push(msg.sender); // Store voted address
        proposal.current_state = calculateCurrentState();

        // End proposal if vote limit is reached
        if ((proposal.approve + proposal.reject + proposal.pass) >= proposal.total_vote_to_end) {
            proposal.is_active = false;
            clearVoterTracking();
        }
    }

    function terminateProposal() external onlyOwner activeProposal {
        proposal_history[counter].is_active = false;
        clearVoterTracking();
    }

    function calculateCurrentState() private view returns (bool) {
        Proposal storage proposal = proposal_history[counter];
        uint256 totalVotes = proposal.approve + proposal.reject;

        if (totalVotes == 0) return false; // Default state if no votes

        // Proposal passes if approve votes are at least 60% of total votes (excluding pass votes)
        return (proposal.approve * 100 / totalVotes) >= 60;
    }

    function clearVoterTracking() private {
        for (uint256 i = 0; i < votedAddresses.length; i++) {
            hasVoted[votedAddresses[i]] = false; // Reset only actual voter addresses
        }
        delete votedAddresses; // Clear the array for the next proposal
    }

    // ** Query Functions **

    function getCurrentProposal() external view returns (Proposal memory) {
        return proposal_history[counter];
    }

    function getProposal(uint256 proposalId) external view returns (Proposal memory) {
        require(proposalId > 0 && proposalId <= counter, "Invalid proposal ID");
        return proposal_history[proposalId];
    }

    function isProposalActive() external view returns (bool) {
        return proposal_history[counter].is_active;
    }
}
